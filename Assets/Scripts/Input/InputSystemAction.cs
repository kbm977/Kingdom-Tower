//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Runtime.Input
{
    public partial class @InputSystemAction: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputSystemAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""PlaySession"",
            ""id"": ""93827a14-42bd-47da-96fd-b8e0121e87b2"",
            ""actions"": [
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""62762d1c-16ac-4379-9bf7-913be4e70002"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""9e3ce0b2-b695-49cb-bf7f-6a74eae93a7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""549e8692-52d8-484d-9685-10e2eabcb711"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4d42843-8d24-4506-a77f-f2ef727d5e71"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6496ed4-cf81-45aa-93fb-24680788816a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51de598a-1cd4-46c5-b99f-44b07ab13785"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
            // PlaySession
            m_PlaySession = asset.FindActionMap("PlaySession", throwIfNotFound: true);
            m_PlaySession_MousePos = m_PlaySession.FindAction("MousePos", throwIfNotFound: true);
            m_PlaySession_Shift = m_PlaySession.FindAction("Shift", throwIfNotFound: true);
            m_PlaySession_MouseLeftClick = m_PlaySession.FindAction("MouseLeftClick", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlaySession
        private readonly InputActionMap m_PlaySession;
        private List<IPlaySessionActions> m_PlaySessionActionsCallbackInterfaces = new List<IPlaySessionActions>();
        private readonly InputAction m_PlaySession_MousePos;
        private readonly InputAction m_PlaySession_Shift;
        private readonly InputAction m_PlaySession_MouseLeftClick;
        public struct PlaySessionActions
        {
            private @InputSystemAction m_Wrapper;
            public PlaySessionActions(@InputSystemAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @MousePos => m_Wrapper.m_PlaySession_MousePos;
            public InputAction @Shift => m_Wrapper.m_PlaySession_Shift;
            public InputAction @MouseLeftClick => m_Wrapper.m_PlaySession_MouseLeftClick;
            public InputActionMap Get() { return m_Wrapper.m_PlaySession; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlaySessionActions set) { return set.Get(); }
            public void AddCallbacks(IPlaySessionActions instance)
            {
                if (instance == null || m_Wrapper.m_PlaySessionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlaySessionActionsCallbackInterfaces.Add(instance);
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
                @MouseLeftClick.started += instance.OnMouseLeftClick;
                @MouseLeftClick.performed += instance.OnMouseLeftClick;
                @MouseLeftClick.canceled += instance.OnMouseLeftClick;
            }

            private void UnregisterCallbacks(IPlaySessionActions instance)
            {
                @MousePos.started -= instance.OnMousePos;
                @MousePos.performed -= instance.OnMousePos;
                @MousePos.canceled -= instance.OnMousePos;
                @Shift.started -= instance.OnShift;
                @Shift.performed -= instance.OnShift;
                @Shift.canceled -= instance.OnShift;
                @MouseLeftClick.started -= instance.OnMouseLeftClick;
                @MouseLeftClick.performed -= instance.OnMouseLeftClick;
                @MouseLeftClick.canceled -= instance.OnMouseLeftClick;
            }

            public void RemoveCallbacks(IPlaySessionActions instance)
            {
                if (m_Wrapper.m_PlaySessionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlaySessionActions instance)
            {
                foreach (var item in m_Wrapper.m_PlaySessionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlaySessionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlaySessionActions @PlaySession => new PlaySessionActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface IPlaySessionActions
        {
            void OnMousePos(InputAction.CallbackContext context);
            void OnShift(InputAction.CallbackContext context);
            void OnMouseLeftClick(InputAction.CallbackContext context);
        }
    }
}
